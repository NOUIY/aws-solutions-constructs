"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventbridgeToKinesisFirehoseToS3 = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const events = require("@aws-cdk/aws-events");
const defaults = require("@aws-solutions-constructs/core");
const iam = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
const core_2 = require("@aws-solutions-constructs/core");
const aws_kinesisfirehose_s3_1 = require("@aws-solutions-constructs/aws-kinesisfirehose-s3");
class EventbridgeToKinesisFirehoseToS3 extends core_1.Construct {
    /**
     * @param scope - represents the scope for all the resources.
     * @param id - this is a a scope-unique id.
     * @param props - user provided props for the construct.
     * @summary Constructs a new instance of the EventbridgeToKinesisFirehoseToS3 class.
     * @access public
     */
    constructor(scope, id, props) {
        super(scope, id);
        defaults.CheckProps(props);
        if (props.existingBucketObj && props.bucketProps) {
            throw new Error('Cannot specify both bucket properties and an existing bucket');
        }
        // Set up the Kinesis Firehose using KinesisFirehoseToS3 construct
        const firehoseToS3 = new aws_kinesisfirehose_s3_1.KinesisFirehoseToS3(this, 'KinesisFirehoseToS3', {
            kinesisFirehoseProps: props.kinesisFirehoseProps,
            existingBucketObj: props.existingBucketObj,
            bucketProps: props.bucketProps,
            logGroupProps: props.logGroupProps
        });
        this.kinesisFirehose = firehoseToS3.kinesisFirehose;
        this.s3Bucket = firehoseToS3.s3Bucket;
        this.kinesisFirehoseRole = firehoseToS3.kinesisFirehoseRole;
        this.s3LoggingBucket = firehoseToS3.s3LoggingBucket;
        this.kinesisFirehoseLogGroup = firehoseToS3.kinesisFirehoseLogGroup;
        // Create an events service role
        this.eventsRole = new iam.Role(this, 'EventsRuleInvokeKinesisFirehoseRole', {
            assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),
            description: 'Events Rule To Kinesis Firehose Role',
        });
        // Setup the IAM policy that grants events rule the permission to send cw events data to kinesis firehose
        const eventsPolicy = new iam.Policy(this, 'EventsRuleInvokeKinesisFirehosePolicy', {
            statements: [new iam.PolicyStatement({
                    actions: [
                        'firehose:PutRecord',
                        'firehose:PutRecordBatch'
                    ],
                    resources: [this.kinesisFirehose.attrArn]
                })
            ]
        });
        // Attach policy to role
        eventsPolicy.attachToRole(this.eventsRole);
        // Set up the Kinesis Firehose as the target for event rule
        const KinesisFirehoseEventTarget = {
            bind: () => ({
                id: '',
                arn: this.kinesisFirehose.attrArn,
                role: this.eventsRole
            })
        };
        // Set up the events rule props
        const defaultEventsRuleProps = defaults.DefaultEventsRuleProps([KinesisFirehoseEventTarget]);
        const eventsRuleProps = core_2.overrideProps(defaultEventsRuleProps, props.eventRuleProps, true);
        this.eventsRule = new events.Rule(this, 'EventsRule', eventsRuleProps);
    }
}
exports.EventbridgeToKinesisFirehoseToS3 = EventbridgeToKinesisFirehoseToS3;
_a = JSII_RTTI_SYMBOL_1;
EventbridgeToKinesisFirehoseToS3[_a] = { fqn: "@aws-solutions-constructs/aws-eventbridge-kinesisfirehose-s3.EventbridgeToKinesisFirehoseToS3", version: "1.114.0" };
//# sourceMappingURL=data:application/json;base64,